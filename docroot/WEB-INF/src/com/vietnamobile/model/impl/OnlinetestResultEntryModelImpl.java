/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vietnamobile.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.vietnamobile.model.OnlinetestResultEntry;
import com.vietnamobile.model.OnlinetestResultEntryModel;
import com.vietnamobile.model.OnlinetestResultEntrySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the OnlinetestResultEntry service. Represents a row in the &quot;iskools_OnlinetestResultEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.vietnamobile.model.OnlinetestResultEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OnlinetestResultEntryImpl}.
 * </p>
 *
 * @author duymb
 * @see OnlinetestResultEntryImpl
 * @see com.vietnamobile.model.OnlinetestResultEntry
 * @see com.vietnamobile.model.OnlinetestResultEntryModel
 * @generated
 */
@JSON(strict = true)
public class OnlinetestResultEntryModelImpl extends BaseModelImpl<OnlinetestResultEntry>
	implements OnlinetestResultEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a onlinetest result entry model instance should use the {@link com.vietnamobile.model.OnlinetestResultEntry} interface instead.
	 */
	public static final String TABLE_NAME = "iskools_OnlinetestResultEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "onlinetestResultEntryId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "onlineTestEntryId", Types.BIGINT },
			{ "score", Types.DOUBLE },
			{ "answerSelected", Types.VARCHAR },
			{ "numberOfWrongAnswer", Types.INTEGER },
			{ "timeRemaining", Types.INTEGER },
			{ "examType", Types.VARCHAR },
			{ "questionIds", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table iskools_OnlinetestResultEntry (onlinetestResultEntryId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,onlineTestEntryId LONG,score DOUBLE,answerSelected VARCHAR(75) null,numberOfWrongAnswer INTEGER,timeRemaining INTEGER,examType VARCHAR(75) null,questionIds VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table iskools_OnlinetestResultEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY onlinetestResultEntry.onlinetestResultEntryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY iskools_OnlinetestResultEntry.onlinetestResultEntryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.vietnamobile.model.OnlinetestResultEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.vietnamobile.model.OnlinetestResultEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static OnlinetestResultEntry toModel(
		OnlinetestResultEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		OnlinetestResultEntry model = new OnlinetestResultEntryImpl();

		model.setOnlinetestResultEntryId(soapModel.getOnlinetestResultEntryId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setOnlineTestEntryId(soapModel.getOnlineTestEntryId());
		model.setScore(soapModel.getScore());
		model.setAnswerSelected(soapModel.getAnswerSelected());
		model.setNumberOfWrongAnswer(soapModel.getNumberOfWrongAnswer());
		model.setTimeRemaining(soapModel.getTimeRemaining());
		model.setExamType(soapModel.getExamType());
		model.setQuestionIds(soapModel.getQuestionIds());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<OnlinetestResultEntry> toModels(
		OnlinetestResultEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<OnlinetestResultEntry> models = new ArrayList<OnlinetestResultEntry>(soapModels.length);

		for (OnlinetestResultEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.vietnamobile.model.OnlinetestResultEntry"));

	public OnlinetestResultEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _onlinetestResultEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOnlinetestResultEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _onlinetestResultEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OnlinetestResultEntry.class;
	}

	@Override
	public String getModelClassName() {
		return OnlinetestResultEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("onlinetestResultEntryId", getOnlinetestResultEntryId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("onlineTestEntryId", getOnlineTestEntryId());
		attributes.put("score", getScore());
		attributes.put("answerSelected", getAnswerSelected());
		attributes.put("numberOfWrongAnswer", getNumberOfWrongAnswer());
		attributes.put("timeRemaining", getTimeRemaining());
		attributes.put("examType", getExamType());
		attributes.put("questionIds", getQuestionIds());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long onlinetestResultEntryId = (Long)attributes.get(
				"onlinetestResultEntryId");

		if (onlinetestResultEntryId != null) {
			setOnlinetestResultEntryId(onlinetestResultEntryId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long onlineTestEntryId = (Long)attributes.get("onlineTestEntryId");

		if (onlineTestEntryId != null) {
			setOnlineTestEntryId(onlineTestEntryId);
		}

		Double score = (Double)attributes.get("score");

		if (score != null) {
			setScore(score);
		}

		String answerSelected = (String)attributes.get("answerSelected");

		if (answerSelected != null) {
			setAnswerSelected(answerSelected);
		}

		Integer numberOfWrongAnswer = (Integer)attributes.get(
				"numberOfWrongAnswer");

		if (numberOfWrongAnswer != null) {
			setNumberOfWrongAnswer(numberOfWrongAnswer);
		}

		Integer timeRemaining = (Integer)attributes.get("timeRemaining");

		if (timeRemaining != null) {
			setTimeRemaining(timeRemaining);
		}

		String examType = (String)attributes.get("examType");

		if (examType != null) {
			setExamType(examType);
		}

		String questionIds = (String)attributes.get("questionIds");

		if (questionIds != null) {
			setQuestionIds(questionIds);
		}
	}

	@JSON
	@Override
	public long getOnlinetestResultEntryId() {
		return _onlinetestResultEntryId;
	}

	@Override
	public void setOnlinetestResultEntryId(long onlinetestResultEntryId) {
		_onlinetestResultEntryId = onlinetestResultEntryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getOnlineTestEntryId() {
		return _onlineTestEntryId;
	}

	@Override
	public void setOnlineTestEntryId(long onlineTestEntryId) {
		_onlineTestEntryId = onlineTestEntryId;
	}

	@JSON
	@Override
	public double getScore() {
		return _score;
	}

	@Override
	public void setScore(double score) {
		_score = score;
	}

	@JSON
	@Override
	public String getAnswerSelected() {
		if (_answerSelected == null) {
			return StringPool.BLANK;
		}
		else {
			return _answerSelected;
		}
	}

	@Override
	public void setAnswerSelected(String answerSelected) {
		_answerSelected = answerSelected;
	}

	@JSON
	@Override
	public int getNumberOfWrongAnswer() {
		return _numberOfWrongAnswer;
	}

	@Override
	public void setNumberOfWrongAnswer(int numberOfWrongAnswer) {
		_numberOfWrongAnswer = numberOfWrongAnswer;
	}

	@JSON
	@Override
	public int getTimeRemaining() {
		return _timeRemaining;
	}

	@Override
	public void setTimeRemaining(int timeRemaining) {
		_timeRemaining = timeRemaining;
	}

	@JSON
	@Override
	public String getExamType() {
		if (_examType == null) {
			return StringPool.BLANK;
		}
		else {
			return _examType;
		}
	}

	@Override
	public void setExamType(String examType) {
		_examType = examType;
	}

	@JSON
	@Override
	public String getQuestionIds() {
		if (_questionIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _questionIds;
		}
	}

	@Override
	public void setQuestionIds(String questionIds) {
		_questionIds = questionIds;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			OnlinetestResultEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OnlinetestResultEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OnlinetestResultEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OnlinetestResultEntryImpl onlinetestResultEntryImpl = new OnlinetestResultEntryImpl();

		onlinetestResultEntryImpl.setOnlinetestResultEntryId(getOnlinetestResultEntryId());
		onlinetestResultEntryImpl.setGroupId(getGroupId());
		onlinetestResultEntryImpl.setCompanyId(getCompanyId());
		onlinetestResultEntryImpl.setUserId(getUserId());
		onlinetestResultEntryImpl.setUserName(getUserName());
		onlinetestResultEntryImpl.setCreateDate(getCreateDate());
		onlinetestResultEntryImpl.setModifiedDate(getModifiedDate());
		onlinetestResultEntryImpl.setOnlineTestEntryId(getOnlineTestEntryId());
		onlinetestResultEntryImpl.setScore(getScore());
		onlinetestResultEntryImpl.setAnswerSelected(getAnswerSelected());
		onlinetestResultEntryImpl.setNumberOfWrongAnswer(getNumberOfWrongAnswer());
		onlinetestResultEntryImpl.setTimeRemaining(getTimeRemaining());
		onlinetestResultEntryImpl.setExamType(getExamType());
		onlinetestResultEntryImpl.setQuestionIds(getQuestionIds());

		onlinetestResultEntryImpl.resetOriginalValues();

		return onlinetestResultEntryImpl;
	}

	@Override
	public int compareTo(OnlinetestResultEntry onlinetestResultEntry) {
		long primaryKey = onlinetestResultEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OnlinetestResultEntry)) {
			return false;
		}

		OnlinetestResultEntry onlinetestResultEntry = (OnlinetestResultEntry)obj;

		long primaryKey = onlinetestResultEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<OnlinetestResultEntry> toCacheModel() {
		OnlinetestResultEntryCacheModel onlinetestResultEntryCacheModel = new OnlinetestResultEntryCacheModel();

		onlinetestResultEntryCacheModel.onlinetestResultEntryId = getOnlinetestResultEntryId();

		onlinetestResultEntryCacheModel.groupId = getGroupId();

		onlinetestResultEntryCacheModel.companyId = getCompanyId();

		onlinetestResultEntryCacheModel.userId = getUserId();

		onlinetestResultEntryCacheModel.userName = getUserName();

		String userName = onlinetestResultEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			onlinetestResultEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			onlinetestResultEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			onlinetestResultEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			onlinetestResultEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			onlinetestResultEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		onlinetestResultEntryCacheModel.onlineTestEntryId = getOnlineTestEntryId();

		onlinetestResultEntryCacheModel.score = getScore();

		onlinetestResultEntryCacheModel.answerSelected = getAnswerSelected();

		String answerSelected = onlinetestResultEntryCacheModel.answerSelected;

		if ((answerSelected != null) && (answerSelected.length() == 0)) {
			onlinetestResultEntryCacheModel.answerSelected = null;
		}

		onlinetestResultEntryCacheModel.numberOfWrongAnswer = getNumberOfWrongAnswer();

		onlinetestResultEntryCacheModel.timeRemaining = getTimeRemaining();

		onlinetestResultEntryCacheModel.examType = getExamType();

		String examType = onlinetestResultEntryCacheModel.examType;

		if ((examType != null) && (examType.length() == 0)) {
			onlinetestResultEntryCacheModel.examType = null;
		}

		onlinetestResultEntryCacheModel.questionIds = getQuestionIds();

		String questionIds = onlinetestResultEntryCacheModel.questionIds;

		if ((questionIds != null) && (questionIds.length() == 0)) {
			onlinetestResultEntryCacheModel.questionIds = null;
		}

		return onlinetestResultEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{onlinetestResultEntryId=");
		sb.append(getOnlinetestResultEntryId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", onlineTestEntryId=");
		sb.append(getOnlineTestEntryId());
		sb.append(", score=");
		sb.append(getScore());
		sb.append(", answerSelected=");
		sb.append(getAnswerSelected());
		sb.append(", numberOfWrongAnswer=");
		sb.append(getNumberOfWrongAnswer());
		sb.append(", timeRemaining=");
		sb.append(getTimeRemaining());
		sb.append(", examType=");
		sb.append(getExamType());
		sb.append(", questionIds=");
		sb.append(getQuestionIds());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.vietnamobile.model.OnlinetestResultEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>onlinetestResultEntryId</column-name><column-value><![CDATA[");
		sb.append(getOnlinetestResultEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>onlineTestEntryId</column-name><column-value><![CDATA[");
		sb.append(getOnlineTestEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>score</column-name><column-value><![CDATA[");
		sb.append(getScore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerSelected</column-name><column-value><![CDATA[");
		sb.append(getAnswerSelected());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfWrongAnswer</column-name><column-value><![CDATA[");
		sb.append(getNumberOfWrongAnswer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeRemaining</column-name><column-value><![CDATA[");
		sb.append(getTimeRemaining());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>examType</column-name><column-value><![CDATA[");
		sb.append(getExamType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionIds</column-name><column-value><![CDATA[");
		sb.append(getQuestionIds());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = OnlinetestResultEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			OnlinetestResultEntry.class
		};
	private long _onlinetestResultEntryId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _onlineTestEntryId;
	private double _score;
	private String _answerSelected;
	private int _numberOfWrongAnswer;
	private int _timeRemaining;
	private String _examType;
	private String _questionIds;
	private OnlinetestResultEntry _escapedModel;
}