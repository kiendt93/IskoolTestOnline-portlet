/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vietnamobile.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.vietnamobile.model.OnlinetestEntry;
import com.vietnamobile.model.OnlinetestEntryModel;
import com.vietnamobile.model.OnlinetestEntrySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the OnlinetestEntry service. Represents a row in the &quot;iskools_OnlinetestEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.vietnamobile.model.OnlinetestEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OnlinetestEntryImpl}.
 * </p>
 *
 * @author duymb
 * @see OnlinetestEntryImpl
 * @see com.vietnamobile.model.OnlinetestEntry
 * @see com.vietnamobile.model.OnlinetestEntryModel
 * @generated
 */
@JSON(strict = true)
public class OnlinetestEntryModelImpl extends BaseModelImpl<OnlinetestEntry>
	implements OnlinetestEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a onlinetest entry model instance should use the {@link com.vietnamobile.model.OnlinetestEntry} interface instead.
	 */
	public static final String TABLE_NAME = "iskools_OnlinetestEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "onlinetestEntryId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "questionId", Types.VARCHAR },
			{ "testStartTime", Types.TIMESTAMP },
			{ "testEndTime", Types.TIMESTAMP },
			{ "duration", Types.INTEGER },
			{ "numberOfQuestions", Types.INTEGER },
			{ "title", Types.VARCHAR },
			{ "point", Types.INTEGER },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table iskools_OnlinetestEntry (onlinetestEntryId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,questionId VARCHAR(75) null,testStartTime DATE null,testEndTime DATE null,duration INTEGER,numberOfQuestions INTEGER,title VARCHAR(75) null,point INTEGER,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table iskools_OnlinetestEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY onlinetestEntry.onlinetestEntryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY iskools_OnlinetestEntry.onlinetestEntryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.vietnamobile.model.OnlinetestEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.vietnamobile.model.OnlinetestEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static OnlinetestEntry toModel(OnlinetestEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		OnlinetestEntry model = new OnlinetestEntryImpl();

		model.setOnlinetestEntryId(soapModel.getOnlinetestEntryId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setQuestionId(soapModel.getQuestionId());
		model.setTestStartTime(soapModel.getTestStartTime());
		model.setTestEndTime(soapModel.getTestEndTime());
		model.setDuration(soapModel.getDuration());
		model.setNumberOfQuestions(soapModel.getNumberOfQuestions());
		model.setTitle(soapModel.getTitle());
		model.setPoint(soapModel.getPoint());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<OnlinetestEntry> toModels(
		OnlinetestEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<OnlinetestEntry> models = new ArrayList<OnlinetestEntry>(soapModels.length);

		for (OnlinetestEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.vietnamobile.model.OnlinetestEntry"));

	public OnlinetestEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _onlinetestEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOnlinetestEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _onlinetestEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OnlinetestEntry.class;
	}

	@Override
	public String getModelClassName() {
		return OnlinetestEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("onlinetestEntryId", getOnlinetestEntryId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("questionId", getQuestionId());
		attributes.put("testStartTime", getTestStartTime());
		attributes.put("testEndTime", getTestEndTime());
		attributes.put("duration", getDuration());
		attributes.put("numberOfQuestions", getNumberOfQuestions());
		attributes.put("title", getTitle());
		attributes.put("point", getPoint());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long onlinetestEntryId = (Long)attributes.get("onlinetestEntryId");

		if (onlinetestEntryId != null) {
			setOnlinetestEntryId(onlinetestEntryId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String questionId = (String)attributes.get("questionId");

		if (questionId != null) {
			setQuestionId(questionId);
		}

		Date testStartTime = (Date)attributes.get("testStartTime");

		if (testStartTime != null) {
			setTestStartTime(testStartTime);
		}

		Date testEndTime = (Date)attributes.get("testEndTime");

		if (testEndTime != null) {
			setTestEndTime(testEndTime);
		}

		Integer duration = (Integer)attributes.get("duration");

		if (duration != null) {
			setDuration(duration);
		}

		Integer numberOfQuestions = (Integer)attributes.get("numberOfQuestions");

		if (numberOfQuestions != null) {
			setNumberOfQuestions(numberOfQuestions);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		Integer point = (Integer)attributes.get("point");

		if (point != null) {
			setPoint(point);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getOnlinetestEntryId() {
		return _onlinetestEntryId;
	}

	@Override
	public void setOnlinetestEntryId(long onlinetestEntryId) {
		_onlinetestEntryId = onlinetestEntryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getQuestionId() {
		if (_questionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _questionId;
		}
	}

	@Override
	public void setQuestionId(String questionId) {
		_questionId = questionId;
	}

	@JSON
	@Override
	public Date getTestStartTime() {
		return _testStartTime;
	}

	@Override
	public void setTestStartTime(Date testStartTime) {
		_testStartTime = testStartTime;
	}

	@JSON
	@Override
	public Date getTestEndTime() {
		return _testEndTime;
	}

	@Override
	public void setTestEndTime(Date testEndTime) {
		_testEndTime = testEndTime;
	}

	@JSON
	@Override
	public int getDuration() {
		return _duration;
	}

	@Override
	public void setDuration(int duration) {
		_duration = duration;
	}

	@JSON
	@Override
	public int getNumberOfQuestions() {
		return _numberOfQuestions;
	}

	@Override
	public void setNumberOfQuestions(int numberOfQuestions) {
		_numberOfQuestions = numberOfQuestions;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public int getPoint() {
		return _point;
	}

	@Override
	public void setPoint(int point) {
		_point = point;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			OnlinetestEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OnlinetestEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OnlinetestEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OnlinetestEntryImpl onlinetestEntryImpl = new OnlinetestEntryImpl();

		onlinetestEntryImpl.setOnlinetestEntryId(getOnlinetestEntryId());
		onlinetestEntryImpl.setGroupId(getGroupId());
		onlinetestEntryImpl.setCompanyId(getCompanyId());
		onlinetestEntryImpl.setUserId(getUserId());
		onlinetestEntryImpl.setUserName(getUserName());
		onlinetestEntryImpl.setCreateDate(getCreateDate());
		onlinetestEntryImpl.setModifiedDate(getModifiedDate());
		onlinetestEntryImpl.setQuestionId(getQuestionId());
		onlinetestEntryImpl.setTestStartTime(getTestStartTime());
		onlinetestEntryImpl.setTestEndTime(getTestEndTime());
		onlinetestEntryImpl.setDuration(getDuration());
		onlinetestEntryImpl.setNumberOfQuestions(getNumberOfQuestions());
		onlinetestEntryImpl.setTitle(getTitle());
		onlinetestEntryImpl.setPoint(getPoint());
		onlinetestEntryImpl.setStatus(getStatus());

		onlinetestEntryImpl.resetOriginalValues();

		return onlinetestEntryImpl;
	}

	@Override
	public int compareTo(OnlinetestEntry onlinetestEntry) {
		long primaryKey = onlinetestEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OnlinetestEntry)) {
			return false;
		}

		OnlinetestEntry onlinetestEntry = (OnlinetestEntry)obj;

		long primaryKey = onlinetestEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<OnlinetestEntry> toCacheModel() {
		OnlinetestEntryCacheModel onlinetestEntryCacheModel = new OnlinetestEntryCacheModel();

		onlinetestEntryCacheModel.onlinetestEntryId = getOnlinetestEntryId();

		onlinetestEntryCacheModel.groupId = getGroupId();

		onlinetestEntryCacheModel.companyId = getCompanyId();

		onlinetestEntryCacheModel.userId = getUserId();

		onlinetestEntryCacheModel.userName = getUserName();

		String userName = onlinetestEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			onlinetestEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			onlinetestEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			onlinetestEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			onlinetestEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			onlinetestEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		onlinetestEntryCacheModel.questionId = getQuestionId();

		String questionId = onlinetestEntryCacheModel.questionId;

		if ((questionId != null) && (questionId.length() == 0)) {
			onlinetestEntryCacheModel.questionId = null;
		}

		Date testStartTime = getTestStartTime();

		if (testStartTime != null) {
			onlinetestEntryCacheModel.testStartTime = testStartTime.getTime();
		}
		else {
			onlinetestEntryCacheModel.testStartTime = Long.MIN_VALUE;
		}

		Date testEndTime = getTestEndTime();

		if (testEndTime != null) {
			onlinetestEntryCacheModel.testEndTime = testEndTime.getTime();
		}
		else {
			onlinetestEntryCacheModel.testEndTime = Long.MIN_VALUE;
		}

		onlinetestEntryCacheModel.duration = getDuration();

		onlinetestEntryCacheModel.numberOfQuestions = getNumberOfQuestions();

		onlinetestEntryCacheModel.title = getTitle();

		String title = onlinetestEntryCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			onlinetestEntryCacheModel.title = null;
		}

		onlinetestEntryCacheModel.point = getPoint();

		onlinetestEntryCacheModel.status = getStatus();

		return onlinetestEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{onlinetestEntryId=");
		sb.append(getOnlinetestEntryId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", questionId=");
		sb.append(getQuestionId());
		sb.append(", testStartTime=");
		sb.append(getTestStartTime());
		sb.append(", testEndTime=");
		sb.append(getTestEndTime());
		sb.append(", duration=");
		sb.append(getDuration());
		sb.append(", numberOfQuestions=");
		sb.append(getNumberOfQuestions());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", point=");
		sb.append(getPoint());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.vietnamobile.model.OnlinetestEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>onlinetestEntryId</column-name><column-value><![CDATA[");
		sb.append(getOnlinetestEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionId</column-name><column-value><![CDATA[");
		sb.append(getQuestionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testStartTime</column-name><column-value><![CDATA[");
		sb.append(getTestStartTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testEndTime</column-name><column-value><![CDATA[");
		sb.append(getTestEndTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>duration</column-name><column-value><![CDATA[");
		sb.append(getDuration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfQuestions</column-name><column-value><![CDATA[");
		sb.append(getNumberOfQuestions());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>point</column-name><column-value><![CDATA[");
		sb.append(getPoint());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = OnlinetestEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			OnlinetestEntry.class
		};
	private long _onlinetestEntryId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _questionId;
	private Date _testStartTime;
	private Date _testEndTime;
	private int _duration;
	private int _numberOfQuestions;
	private String _title;
	private int _point;
	private int _status;
	private OnlinetestEntry _escapedModel;
}