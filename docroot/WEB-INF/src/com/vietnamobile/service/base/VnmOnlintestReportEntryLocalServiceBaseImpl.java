/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vietnamobile.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.vietnamobile.model.VnmOnlintestReportEntry;

import com.vietnamobile.service.VnmOnlintestReportEntryLocalService;
import com.vietnamobile.service.persistence.OnlinetestEntryPersistence;
import com.vietnamobile.service.persistence.OnlinetestResultEntryPersistence;
import com.vietnamobile.service.persistence.QuestionEntryPersistence;
import com.vietnamobile.service.persistence.SubjectEntryPersistence;
import com.vietnamobile.service.persistence.VnmArticleReportEntryPersistence;
import com.vietnamobile.service.persistence.VnmOnlintestReportEntryPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the vnm onlintest report entry local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.vietnamobile.service.impl.VnmOnlintestReportEntryLocalServiceImpl}.
 * </p>
 *
 * @author duymb
 * @see com.vietnamobile.service.impl.VnmOnlintestReportEntryLocalServiceImpl
 * @see com.vietnamobile.service.VnmOnlintestReportEntryLocalServiceUtil
 * @generated
 */
public abstract class VnmOnlintestReportEntryLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements VnmOnlintestReportEntryLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.vietnamobile.service.VnmOnlintestReportEntryLocalServiceUtil} to access the vnm onlintest report entry local service.
	 */

	/**
	 * Adds the vnm onlintest report entry to the database. Also notifies the appropriate model listeners.
	 *
	 * @param vnmOnlintestReportEntry the vnm onlintest report entry
	 * @return the vnm onlintest report entry that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public VnmOnlintestReportEntry addVnmOnlintestReportEntry(
		VnmOnlintestReportEntry vnmOnlintestReportEntry)
		throws SystemException {
		vnmOnlintestReportEntry.setNew(true);

		return vnmOnlintestReportEntryPersistence.update(vnmOnlintestReportEntry);
	}

	/**
	 * Creates a new vnm onlintest report entry with the primary key. Does not add the vnm onlintest report entry to the database.
	 *
	 * @param vnmOnlintestReportEntryId the primary key for the new vnm onlintest report entry
	 * @return the new vnm onlintest report entry
	 */
	@Override
	public VnmOnlintestReportEntry createVnmOnlintestReportEntry(
		long vnmOnlintestReportEntryId) {
		return vnmOnlintestReportEntryPersistence.create(vnmOnlintestReportEntryId);
	}

	/**
	 * Deletes the vnm onlintest report entry with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param vnmOnlintestReportEntryId the primary key of the vnm onlintest report entry
	 * @return the vnm onlintest report entry that was removed
	 * @throws PortalException if a vnm onlintest report entry with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public VnmOnlintestReportEntry deleteVnmOnlintestReportEntry(
		long vnmOnlintestReportEntryId) throws PortalException, SystemException {
		return vnmOnlintestReportEntryPersistence.remove(vnmOnlintestReportEntryId);
	}

	/**
	 * Deletes the vnm onlintest report entry from the database. Also notifies the appropriate model listeners.
	 *
	 * @param vnmOnlintestReportEntry the vnm onlintest report entry
	 * @return the vnm onlintest report entry that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public VnmOnlintestReportEntry deleteVnmOnlintestReportEntry(
		VnmOnlintestReportEntry vnmOnlintestReportEntry)
		throws SystemException {
		return vnmOnlintestReportEntryPersistence.remove(vnmOnlintestReportEntry);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(VnmOnlintestReportEntry.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return vnmOnlintestReportEntryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.vietnamobile.model.impl.VnmOnlintestReportEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return vnmOnlintestReportEntryPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.vietnamobile.model.impl.VnmOnlintestReportEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return vnmOnlintestReportEntryPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return vnmOnlintestReportEntryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return vnmOnlintestReportEntryPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public VnmOnlintestReportEntry fetchVnmOnlintestReportEntry(
		long vnmOnlintestReportEntryId) throws SystemException {
		return vnmOnlintestReportEntryPersistence.fetchByPrimaryKey(vnmOnlintestReportEntryId);
	}

	/**
	 * Returns the vnm onlintest report entry with the primary key.
	 *
	 * @param vnmOnlintestReportEntryId the primary key of the vnm onlintest report entry
	 * @return the vnm onlintest report entry
	 * @throws PortalException if a vnm onlintest report entry with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public VnmOnlintestReportEntry getVnmOnlintestReportEntry(
		long vnmOnlintestReportEntryId) throws PortalException, SystemException {
		return vnmOnlintestReportEntryPersistence.findByPrimaryKey(vnmOnlintestReportEntryId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return vnmOnlintestReportEntryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the vnm onlintest report entries.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.vietnamobile.model.impl.VnmOnlintestReportEntryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of vnm onlintest report entries
	 * @param end the upper bound of the range of vnm onlintest report entries (not inclusive)
	 * @return the range of vnm onlintest report entries
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<VnmOnlintestReportEntry> getVnmOnlintestReportEntries(
		int start, int end) throws SystemException {
		return vnmOnlintestReportEntryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of vnm onlintest report entries.
	 *
	 * @return the number of vnm onlintest report entries
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getVnmOnlintestReportEntriesCount() throws SystemException {
		return vnmOnlintestReportEntryPersistence.countAll();
	}

	/**
	 * Updates the vnm onlintest report entry in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param vnmOnlintestReportEntry the vnm onlintest report entry
	 * @return the vnm onlintest report entry that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public VnmOnlintestReportEntry updateVnmOnlintestReportEntry(
		VnmOnlintestReportEntry vnmOnlintestReportEntry)
		throws SystemException {
		return vnmOnlintestReportEntryPersistence.update(vnmOnlintestReportEntry);
	}

	/**
	 * Returns the onlinetest entry local service.
	 *
	 * @return the onlinetest entry local service
	 */
	public com.vietnamobile.service.OnlinetestEntryLocalService getOnlinetestEntryLocalService() {
		return onlinetestEntryLocalService;
	}

	/**
	 * Sets the onlinetest entry local service.
	 *
	 * @param onlinetestEntryLocalService the onlinetest entry local service
	 */
	public void setOnlinetestEntryLocalService(
		com.vietnamobile.service.OnlinetestEntryLocalService onlinetestEntryLocalService) {
		this.onlinetestEntryLocalService = onlinetestEntryLocalService;
	}

	/**
	 * Returns the onlinetest entry remote service.
	 *
	 * @return the onlinetest entry remote service
	 */
	public com.vietnamobile.service.OnlinetestEntryService getOnlinetestEntryService() {
		return onlinetestEntryService;
	}

	/**
	 * Sets the onlinetest entry remote service.
	 *
	 * @param onlinetestEntryService the onlinetest entry remote service
	 */
	public void setOnlinetestEntryService(
		com.vietnamobile.service.OnlinetestEntryService onlinetestEntryService) {
		this.onlinetestEntryService = onlinetestEntryService;
	}

	/**
	 * Returns the onlinetest entry persistence.
	 *
	 * @return the onlinetest entry persistence
	 */
	public OnlinetestEntryPersistence getOnlinetestEntryPersistence() {
		return onlinetestEntryPersistence;
	}

	/**
	 * Sets the onlinetest entry persistence.
	 *
	 * @param onlinetestEntryPersistence the onlinetest entry persistence
	 */
	public void setOnlinetestEntryPersistence(
		OnlinetestEntryPersistence onlinetestEntryPersistence) {
		this.onlinetestEntryPersistence = onlinetestEntryPersistence;
	}

	/**
	 * Returns the onlinetest result entry local service.
	 *
	 * @return the onlinetest result entry local service
	 */
	public com.vietnamobile.service.OnlinetestResultEntryLocalService getOnlinetestResultEntryLocalService() {
		return onlinetestResultEntryLocalService;
	}

	/**
	 * Sets the onlinetest result entry local service.
	 *
	 * @param onlinetestResultEntryLocalService the onlinetest result entry local service
	 */
	public void setOnlinetestResultEntryLocalService(
		com.vietnamobile.service.OnlinetestResultEntryLocalService onlinetestResultEntryLocalService) {
		this.onlinetestResultEntryLocalService = onlinetestResultEntryLocalService;
	}

	/**
	 * Returns the onlinetest result entry remote service.
	 *
	 * @return the onlinetest result entry remote service
	 */
	public com.vietnamobile.service.OnlinetestResultEntryService getOnlinetestResultEntryService() {
		return onlinetestResultEntryService;
	}

	/**
	 * Sets the onlinetest result entry remote service.
	 *
	 * @param onlinetestResultEntryService the onlinetest result entry remote service
	 */
	public void setOnlinetestResultEntryService(
		com.vietnamobile.service.OnlinetestResultEntryService onlinetestResultEntryService) {
		this.onlinetestResultEntryService = onlinetestResultEntryService;
	}

	/**
	 * Returns the onlinetest result entry persistence.
	 *
	 * @return the onlinetest result entry persistence
	 */
	public OnlinetestResultEntryPersistence getOnlinetestResultEntryPersistence() {
		return onlinetestResultEntryPersistence;
	}

	/**
	 * Sets the onlinetest result entry persistence.
	 *
	 * @param onlinetestResultEntryPersistence the onlinetest result entry persistence
	 */
	public void setOnlinetestResultEntryPersistence(
		OnlinetestResultEntryPersistence onlinetestResultEntryPersistence) {
		this.onlinetestResultEntryPersistence = onlinetestResultEntryPersistence;
	}

	/**
	 * Returns the question entry local service.
	 *
	 * @return the question entry local service
	 */
	public com.vietnamobile.service.QuestionEntryLocalService getQuestionEntryLocalService() {
		return questionEntryLocalService;
	}

	/**
	 * Sets the question entry local service.
	 *
	 * @param questionEntryLocalService the question entry local service
	 */
	public void setQuestionEntryLocalService(
		com.vietnamobile.service.QuestionEntryLocalService questionEntryLocalService) {
		this.questionEntryLocalService = questionEntryLocalService;
	}

	/**
	 * Returns the question entry remote service.
	 *
	 * @return the question entry remote service
	 */
	public com.vietnamobile.service.QuestionEntryService getQuestionEntryService() {
		return questionEntryService;
	}

	/**
	 * Sets the question entry remote service.
	 *
	 * @param questionEntryService the question entry remote service
	 */
	public void setQuestionEntryService(
		com.vietnamobile.service.QuestionEntryService questionEntryService) {
		this.questionEntryService = questionEntryService;
	}

	/**
	 * Returns the question entry persistence.
	 *
	 * @return the question entry persistence
	 */
	public QuestionEntryPersistence getQuestionEntryPersistence() {
		return questionEntryPersistence;
	}

	/**
	 * Sets the question entry persistence.
	 *
	 * @param questionEntryPersistence the question entry persistence
	 */
	public void setQuestionEntryPersistence(
		QuestionEntryPersistence questionEntryPersistence) {
		this.questionEntryPersistence = questionEntryPersistence;
	}

	/**
	 * Returns the subject entry local service.
	 *
	 * @return the subject entry local service
	 */
	public com.vietnamobile.service.SubjectEntryLocalService getSubjectEntryLocalService() {
		return subjectEntryLocalService;
	}

	/**
	 * Sets the subject entry local service.
	 *
	 * @param subjectEntryLocalService the subject entry local service
	 */
	public void setSubjectEntryLocalService(
		com.vietnamobile.service.SubjectEntryLocalService subjectEntryLocalService) {
		this.subjectEntryLocalService = subjectEntryLocalService;
	}

	/**
	 * Returns the subject entry remote service.
	 *
	 * @return the subject entry remote service
	 */
	public com.vietnamobile.service.SubjectEntryService getSubjectEntryService() {
		return subjectEntryService;
	}

	/**
	 * Sets the subject entry remote service.
	 *
	 * @param subjectEntryService the subject entry remote service
	 */
	public void setSubjectEntryService(
		com.vietnamobile.service.SubjectEntryService subjectEntryService) {
		this.subjectEntryService = subjectEntryService;
	}

	/**
	 * Returns the subject entry persistence.
	 *
	 * @return the subject entry persistence
	 */
	public SubjectEntryPersistence getSubjectEntryPersistence() {
		return subjectEntryPersistence;
	}

	/**
	 * Sets the subject entry persistence.
	 *
	 * @param subjectEntryPersistence the subject entry persistence
	 */
	public void setSubjectEntryPersistence(
		SubjectEntryPersistence subjectEntryPersistence) {
		this.subjectEntryPersistence = subjectEntryPersistence;
	}

	/**
	 * Returns the vnm article report entry local service.
	 *
	 * @return the vnm article report entry local service
	 */
	public com.vietnamobile.service.VnmArticleReportEntryLocalService getVnmArticleReportEntryLocalService() {
		return vnmArticleReportEntryLocalService;
	}

	/**
	 * Sets the vnm article report entry local service.
	 *
	 * @param vnmArticleReportEntryLocalService the vnm article report entry local service
	 */
	public void setVnmArticleReportEntryLocalService(
		com.vietnamobile.service.VnmArticleReportEntryLocalService vnmArticleReportEntryLocalService) {
		this.vnmArticleReportEntryLocalService = vnmArticleReportEntryLocalService;
	}

	/**
	 * Returns the vnm article report entry remote service.
	 *
	 * @return the vnm article report entry remote service
	 */
	public com.vietnamobile.service.VnmArticleReportEntryService getVnmArticleReportEntryService() {
		return vnmArticleReportEntryService;
	}

	/**
	 * Sets the vnm article report entry remote service.
	 *
	 * @param vnmArticleReportEntryService the vnm article report entry remote service
	 */
	public void setVnmArticleReportEntryService(
		com.vietnamobile.service.VnmArticleReportEntryService vnmArticleReportEntryService) {
		this.vnmArticleReportEntryService = vnmArticleReportEntryService;
	}

	/**
	 * Returns the vnm article report entry persistence.
	 *
	 * @return the vnm article report entry persistence
	 */
	public VnmArticleReportEntryPersistence getVnmArticleReportEntryPersistence() {
		return vnmArticleReportEntryPersistence;
	}

	/**
	 * Sets the vnm article report entry persistence.
	 *
	 * @param vnmArticleReportEntryPersistence the vnm article report entry persistence
	 */
	public void setVnmArticleReportEntryPersistence(
		VnmArticleReportEntryPersistence vnmArticleReportEntryPersistence) {
		this.vnmArticleReportEntryPersistence = vnmArticleReportEntryPersistence;
	}

	/**
	 * Returns the vnm onlintest report entry local service.
	 *
	 * @return the vnm onlintest report entry local service
	 */
	public com.vietnamobile.service.VnmOnlintestReportEntryLocalService getVnmOnlintestReportEntryLocalService() {
		return vnmOnlintestReportEntryLocalService;
	}

	/**
	 * Sets the vnm onlintest report entry local service.
	 *
	 * @param vnmOnlintestReportEntryLocalService the vnm onlintest report entry local service
	 */
	public void setVnmOnlintestReportEntryLocalService(
		com.vietnamobile.service.VnmOnlintestReportEntryLocalService vnmOnlintestReportEntryLocalService) {
		this.vnmOnlintestReportEntryLocalService = vnmOnlintestReportEntryLocalService;
	}

	/**
	 * Returns the vnm onlintest report entry remote service.
	 *
	 * @return the vnm onlintest report entry remote service
	 */
	public com.vietnamobile.service.VnmOnlintestReportEntryService getVnmOnlintestReportEntryService() {
		return vnmOnlintestReportEntryService;
	}

	/**
	 * Sets the vnm onlintest report entry remote service.
	 *
	 * @param vnmOnlintestReportEntryService the vnm onlintest report entry remote service
	 */
	public void setVnmOnlintestReportEntryService(
		com.vietnamobile.service.VnmOnlintestReportEntryService vnmOnlintestReportEntryService) {
		this.vnmOnlintestReportEntryService = vnmOnlintestReportEntryService;
	}

	/**
	 * Returns the vnm onlintest report entry persistence.
	 *
	 * @return the vnm onlintest report entry persistence
	 */
	public VnmOnlintestReportEntryPersistence getVnmOnlintestReportEntryPersistence() {
		return vnmOnlintestReportEntryPersistence;
	}

	/**
	 * Sets the vnm onlintest report entry persistence.
	 *
	 * @param vnmOnlintestReportEntryPersistence the vnm onlintest report entry persistence
	 */
	public void setVnmOnlintestReportEntryPersistence(
		VnmOnlintestReportEntryPersistence vnmOnlintestReportEntryPersistence) {
		this.vnmOnlintestReportEntryPersistence = vnmOnlintestReportEntryPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.vietnamobile.model.VnmOnlintestReportEntry",
			vnmOnlintestReportEntryLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.vietnamobile.model.VnmOnlintestReportEntry");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return VnmOnlintestReportEntry.class;
	}

	protected String getModelClassName() {
		return VnmOnlintestReportEntry.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = vnmOnlintestReportEntryPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.vietnamobile.service.OnlinetestEntryLocalService.class)
	protected com.vietnamobile.service.OnlinetestEntryLocalService onlinetestEntryLocalService;
	@BeanReference(type = com.vietnamobile.service.OnlinetestEntryService.class)
	protected com.vietnamobile.service.OnlinetestEntryService onlinetestEntryService;
	@BeanReference(type = OnlinetestEntryPersistence.class)
	protected OnlinetestEntryPersistence onlinetestEntryPersistence;
	@BeanReference(type = com.vietnamobile.service.OnlinetestResultEntryLocalService.class)
	protected com.vietnamobile.service.OnlinetestResultEntryLocalService onlinetestResultEntryLocalService;
	@BeanReference(type = com.vietnamobile.service.OnlinetestResultEntryService.class)
	protected com.vietnamobile.service.OnlinetestResultEntryService onlinetestResultEntryService;
	@BeanReference(type = OnlinetestResultEntryPersistence.class)
	protected OnlinetestResultEntryPersistence onlinetestResultEntryPersistence;
	@BeanReference(type = com.vietnamobile.service.QuestionEntryLocalService.class)
	protected com.vietnamobile.service.QuestionEntryLocalService questionEntryLocalService;
	@BeanReference(type = com.vietnamobile.service.QuestionEntryService.class)
	protected com.vietnamobile.service.QuestionEntryService questionEntryService;
	@BeanReference(type = QuestionEntryPersistence.class)
	protected QuestionEntryPersistence questionEntryPersistence;
	@BeanReference(type = com.vietnamobile.service.SubjectEntryLocalService.class)
	protected com.vietnamobile.service.SubjectEntryLocalService subjectEntryLocalService;
	@BeanReference(type = com.vietnamobile.service.SubjectEntryService.class)
	protected com.vietnamobile.service.SubjectEntryService subjectEntryService;
	@BeanReference(type = SubjectEntryPersistence.class)
	protected SubjectEntryPersistence subjectEntryPersistence;
	@BeanReference(type = com.vietnamobile.service.VnmArticleReportEntryLocalService.class)
	protected com.vietnamobile.service.VnmArticleReportEntryLocalService vnmArticleReportEntryLocalService;
	@BeanReference(type = com.vietnamobile.service.VnmArticleReportEntryService.class)
	protected com.vietnamobile.service.VnmArticleReportEntryService vnmArticleReportEntryService;
	@BeanReference(type = VnmArticleReportEntryPersistence.class)
	protected VnmArticleReportEntryPersistence vnmArticleReportEntryPersistence;
	@BeanReference(type = com.vietnamobile.service.VnmOnlintestReportEntryLocalService.class)
	protected com.vietnamobile.service.VnmOnlintestReportEntryLocalService vnmOnlintestReportEntryLocalService;
	@BeanReference(type = com.vietnamobile.service.VnmOnlintestReportEntryService.class)
	protected com.vietnamobile.service.VnmOnlintestReportEntryService vnmOnlintestReportEntryService;
	@BeanReference(type = VnmOnlintestReportEntryPersistence.class)
	protected VnmOnlintestReportEntryPersistence vnmOnlintestReportEntryPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private VnmOnlintestReportEntryLocalServiceClpInvoker _clpInvoker = new VnmOnlintestReportEntryLocalServiceClpInvoker();
}